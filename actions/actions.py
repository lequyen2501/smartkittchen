from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
import random, re

# ---------------------- DANH S√ÅCH C√îNG TH·ª®C ----------------------
RECIPES = {
    "ph·ªü b√≤": {
        "ingredients": ["b√°nh ph·ªü", "th·ªãt b√≤", "h√†nh", "g·ª´ng", "n∆∞·ªõc d√πng", "gia v·ªã"],
        "time": 40,
        "steps": [
            "N·∫•u n∆∞·ªõc d√πng v·ªõi x∆∞∆°ng b√≤, h√†nh v√† g·ª´ng n∆∞·ªõng",
            "Ch·∫ßn b√°nh ph·ªü v√† th·ªãt b√≤",
            "M√∫c n∆∞·ªõc d√πng, th√™m h√†nh, ng√≤ v√† gia v·ªã v·ª´a ƒÉn"
        ]
    },
    "b√∫n b√≤ hu·∫ø": {
        "ingredients": ["b√∫n", "ch·∫£", "th·ªãt b√≤", "s·∫£", "m·∫Øm ru·ªëc"],
        "time": 45,
        "steps": [
            "N·∫•u n∆∞·ªõc d√πng v·ªõi s·∫£ v√† m·∫Øm ru·ªëc",
            "Cho th·ªãt b√≤ v√† ch·∫£ v√†o n·ªìi",
            "Th√™m b√∫n, chan n∆∞·ªõc d√πng v√† ƒÉn n√≥ng"
        ]
    },
    "c∆°m chi√™n d∆∞∆°ng ch√¢u": {
        "ingredients": ["c∆°m ngu·ªôi", "tr·ª©ng", "t√¥m", "l·∫°p x∆∞·ªüng", "c√† r·ªët", "ƒë·∫≠u H√† Lan"],
        "time": 20,
        "steps": [
            "X√†o tr·ª©ng v√† nguy√™n li·ªáu ch√≠n",
            "Cho c∆°m v√†o ƒë·∫£o ƒë·ªÅu",
            "N√™m n·∫øm v·ª´a ƒÉn, r·∫Øc h√†nh l√°"
        ]
    },
    "c√° kho t·ªô": {
        "ingredients": ["c√°", "n∆∞·ªõc m·∫Øm", "ƒë∆∞·ªùng", "ti√™u", "·ªõt", "h√†nh t·ªèi"],
        "time": 30,
        "steps": [
            "∆Ø·ªõp c√° v·ªõi n∆∞·ªõc m·∫Øm, ƒë∆∞·ªùng, ti√™u, h√†nh t·ªèi",
            "Kho c√° l·ª≠a nh·ªè ƒë·∫øn khi n∆∞·ªõc s·ªát l·∫°i",
            "R·∫Øc ti√™u v√† d√πng n√≥ng v·ªõi c∆°m"
        ]
    },
    "canh chua c√°": {
        "ingredients": ["c√°", "c√† chua", "d·ª©a", "me", "rau th∆°m"],
        "time": 25,
        "steps": [
            "N·∫•u n∆∞·ªõc d√πng v·ªõi me, c√† chua, d·ª©a",
            "Th·∫£ c√° v√†o, n√™m n·∫øm v·ª´a ƒÉn",
            "Th√™m rau th∆°m, t·∫Øt b·∫øp"
        ]
    },
    "tr·ª©ng chi√™n rau c·ªß": {
        "ingredients": ["tr·ª©ng", "c√† r·ªët", "h√†nh l√°", "d·∫ßu ƒÉn", "gia v·ªã"],
        "time": 12,
        "steps": [
            "ƒê√°nh tr·ª©ng v·ªõi gia v·ªã",
            "X√†o s∆° rau c·ªß, ƒë·ªï tr·ª©ng v√†o",
            "Chi√™n ch√≠n v√†ng hai m·∫∑t"
        ]
    },
    "tr·ª©ng h·∫•p n·∫•m": {
        "ingredients": ["tr·ª©ng", "n·∫•m", "h√†nh l√°", "gia v·ªã"],
        "time": 15,
        "steps": [
            "ƒê√°nh tr·ª©ng v·ªõi n∆∞·ªõc d√πng v√† gia v·ªã",
            "Cho n·∫•m v√†o b√°t, ƒë·ªï tr·ª©ng l√™n",
            "H·∫•p 12‚Äì15 ph√∫t"
        ]
    },
    "ch√°o y·∫øn m·∫°ch": {
        "ingredients": ["y·∫øn m·∫°ch", "rau c·ªß", "mu·ªëi", "n∆∞·ªõc"],
        "time": 20,
        "steps": [
            "N·∫•u y·∫øn m·∫°ch v·ªõi n∆∞·ªõc cho n·ªü",
            "Th√™m rau c·ªß v√† mu·ªëi",
            "Khu·∫•y ƒë·ªÅu ƒë·∫øn khi s·ªát l·∫°i"
        ]
    },
    "s√∫p b√≠ ƒë·ªè": {
        "ingredients": ["b√≠ ƒë·ªè", "s·ªØa t∆∞∆°i", "b∆°", "h√†nh t√¢y", "mu·ªëi"],
        "time": 25,
        "steps": [
            "X√†o b√≠ ƒë·ªè v√† h√†nh t√¢y",
            "Th√™m n∆∞·ªõc n·∫•u m·ªÅm r·ªìi xay nhuy·ªÖn",
            "ƒêun l·∫°i v·ªõi s·ªØa v√† b∆°, n√™m n·∫øm v·ª´a ƒÉn"
        ]
    },
    "g·ªèi cu·ªën": {
        "ingredients": ["b√°nh tr√°ng", "t√¥m", "th·ªãt", "rau s·ªëng", "b√∫n"],
        "time": 15,
        "steps": [
            "Lu·ªôc t√¥m, th·ªãt, c·∫Øt l√°t",
            "Cu·ªën c√πng rau s·ªëng v√† b√∫n v√†o b√°nh tr√°ng",
            "Ch·∫•m c√πng n∆∞·ªõc m·∫Øm chua ng·ªçt"
        ]
    }
}

# ---------------------- H√ÄM H·ªñ TR·ª¢ ----------------------
def find_by_ingredient(ing):
    return [d for d, info in RECIPES.items() if ing in info["ingredients"]]

def list_under_minutes(minutes):
    return [d for d, info in RECIPES.items() if info["time"] <= minutes]

# ---------------------- ACTIONS ----------------------

class ActionSuggestRecipe(Action):
    def name(self): return "action_suggest_recipe"

    def run(self, dispatcher, tracker, domain):
        text = tracker.latest_message.get("text", "").lower()
        picks = []

        for ing in ["tr·ª©ng", "c√°", "g√†", "t√¥m", "b√≤"]:
            if ing in text:
                picks += find_by_ingredient(ing)

        if "ph√∫t" in text:
            m = re.search(r"(\d+)\s*ph√∫t", text)
            if m:
                picks += list_under_minutes(int(m.group(1)))

        dish = random.choice(picks or list(RECIPES.keys()))
        dispatcher.utter_message(text=f"G·ª£i √Ω: **{dish}**. B·∫°n mu·ªën xem nguy√™n li·ªáu hay c√°ch n·∫•u?")
        return []

class ActionAskIngredients(Action):
    def name(self): return "action_ask_ingredients"

    def run(self, dispatcher, tracker, domain):
        text = tracker.latest_message.get("text", "").lower()
        dish = next((d for d in RECIPES if d in text), None) or random.choice(list(RECIPES.keys()))
        dispatcher.utter_message(text=f"Nguy√™n li·ªáu c·ªßa **{dish}**: {', '.join(RECIPES[dish]['ingredients'])}.")
        return []

class ActionAskTime(Action):
    def name(self): return "action_ask_time"

    def run(self, dispatcher, tracker, domain):
        text = tracker.latest_message.get("text", "").lower()
        dish = next((d for d in RECIPES if d in text), None) or random.choice(list(RECIPES.keys()))
        dispatcher.utter_message(text=f"M√≥n **{dish}** n·∫•u kho·∫£ng **{RECIPES[dish]['time']} ph√∫t**.")
        return []

class ActionAskSteps(Action):
    def name(self): return "action_ask_steps"

    def run(self, dispatcher, tracker, domain):
        text = tracker.latest_message.get("text", "").lower()
        dish = next((d for d in RECIPES if d in text), None)
        if dish:
            steps = "\n- ".join(RECIPES[dish]["steps"])
            dispatcher.utter_message(text=f"C√°ch n·∫•u **{dish}**:\n- {steps}")
        else:
            dispatcher.utter_message(text="Xin l·ªói, hi·ªán m√¨nh ch∆∞a c√≥ c√¥ng th·ª©c cho m√≥n n√†y. B·∫°n c√≥ th·ªÉ h·ªèi m√≥n kh√°c nh√©!")
        return []

# ---------------------- PH·∫¶N M·ªû R·ªòNG ----------------------
class ActionHealthyRecipes(Action):
    def name(self): return "action_healthy_recipes"

    def run(self, dispatcher, tracker, domain):
        dispatcher.utter_message(text="G·ª£i √Ω m√≥n t·ªët cho s·ª©c kh·ªèe:\n- Salad rau c·ªß ü•ó\n- Ch√°o y·∫øn m·∫°ch\n- C√° h·∫•p g·ª´ng\n- S√∫p b√≠ ƒë·ªè\n- Tr·ª©ng h·∫•p n·∫•m üçÑ")
        return []

class ActionDiabetesRecipes(Action):
    def name(self): return "action_diabetes_recipes"

    def run(self, dispatcher, tracker, domain):
        dispatcher.utter_message(text="Ng∆∞·ªùi b·ªã ti·ªÉu ƒë∆∞·ªùng n√™n ƒÉn:\n- Ch√°o y·∫øn m·∫°ch, c√° h·∫•p, rau lu·ªôc\n- Tr√°nh ƒë·ªì chi√™n r√°n v√† th·ª©c ƒÉn nhi·ªÅu ƒë∆∞·ªùng.")
        return []

class ActionMealTimeRecipes(Action):
    def name(self): return "action_mealtime_recipes"

    def run(self, dispatcher, tracker, domain):
        text = tracker.latest_message.get("text", "")
        if "s√°ng" in text:
            msg = "B·ªØa s√°ng n√™n ƒÉn nh·∫π: tr·ª©ng lu·ªôc, b√°nh m√¨ nguy√™n c√°m, s·ªØa chua kh√¥ng ƒë∆∞·ªùng."
        elif "tr∆∞a" in text:
            msg = "B·ªØa tr∆∞a n√™n ƒÉn ƒë·ªß ch·∫•t: c∆°m g·∫°o l·ª©t, c√° h·∫•p, rau lu·ªôc."
        elif "t·ªëi" in text:
            msg = "B·ªØa t·ªëi n√™n ƒÉn thanh ƒë·∫°m: salad, s√∫p b√≠ ƒë·ªè ho·∫∑c ch√°o y·∫øn m·∫°ch."
        else:
            msg = "B·∫°n c√≥ th·ªÉ ch·ªçn m√≥n nh·∫π nh∆∞ tr√°i c√¢y ho·∫∑c sinh t·ªë."
        dispatcher.utter_message(text=msg)
        return []

class ActionCookingTips(Action):
    def name(self): return "action_cooking_tips"

    def run(self, dispatcher, tracker, domain):
        dispatcher.utter_message(text="M·∫πo n·∫•u ƒÉn: d√πng ch·∫£o ch·ªëng d√≠nh, n√™m mu·ªëi sau c√πng ƒë·ªÉ rau xanh, v√† chi√™n b·∫±ng d·∫ßu n√≥ng ƒë·ªÅu ƒë·ªÉ kh√¥ng d√≠nh ch·∫£o.")
        return []

class ActionFoodStorage(Action):
    def name(self): return "action_food_storage"

    def run(self, dispatcher, tracker, domain):
        dispatcher.utter_message(text="B·∫£o qu·∫£n: rau c·ªß trong ngƒÉn m√°t 3 ng√†y, tr·ª©ng 7 ng√†y, c√° ƒë√¥ng l·∫°nh 2 tu·∫ßn. ƒê·ªì ƒÉn th·ª´a n√™n d√πng trong 24h.")
        return []

class ActionSubstituteIngredient(Action):
    def name(self): return "action_substitute_ingredient"

    def run(self, dispatcher, tracker, domain):
        dispatcher.utter_message(text="Thay th·∫ø nguy√™n li·ªáu:\n- ƒê∆∞·ªùng ‚Üí m·∫≠t ong\n- N∆∞·ªõc m·∫Øm ‚Üí mu·ªëi & n∆∞·ªõc t∆∞∆°ng\n- Th·ªãt ‚Üí ƒë·∫≠u ph·ª• khi ƒÉn chay\n- D·∫ßu ƒÉn ‚Üí b∆° ho·∫∑c d·∫ßu √¥ liu.")
        return []
